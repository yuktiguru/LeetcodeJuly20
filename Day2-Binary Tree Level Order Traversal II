QUESTION
//Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).
For example:
Given binary tree [3,9,20,null,null,15,7],

EXAMPLE
  3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]

SOLUTION
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
         List<List<Integer>> result = new ArrayList<List<Integer>>();
        
        if (root == null) return result;
        
        ArrayDeque<TreeNode> queue = new ArrayDeque<TreeNode>();
        queue.offer(root);
        
        TreeNode cur;
        
        
        while(!queue.isEmpty()){
            int levelSize = queue.size();
            List<Integer> curLevel = new ArrayList<Integer>();
            for (int i = 0; i< levelSize; i++){
                if (queue.peek().left != null) queue.offer(queue.peek().left);
                if (queue.peek().right != null) queue.offer(queue.peek().right);
                curLevel.add(queue.poll().val);
            }
            result.add(0,curLevel);
        }
        
        return result;
        
    }
}
